"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const events_1 = __importDefault(require("events"));
const util_1 = require("util");
const sqlite3_1 = __importDefault(require("sqlite3"));
const toString = (input) => String(input).search(/^[a-zA-Z]+$/) < 0 ? '_' + input : input;
class KeyvSqlite extends events_1.default {
    constructor(keyvOptions) {
        super();
        this.ttlSupport = false;
        let options = {
            dialect: 'sqlite',
            uri: 'sqlite://:memory:',
        };
        if (typeof keyvOptions === 'string') {
            options.uri = keyvOptions;
        }
        else {
            options = Object.assign(Object.assign({}, options), keyvOptions);
        }
        options.db = options.uri.replace(/^sqlite:\/\//, '');
        options.connect = () => __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const db = new sqlite3_1.default.Database(options.db, error => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (options.busyTimeout) {
                            db.configure('busyTimeout', options.busyTimeout);
                        }
                        resolve(db);
                    }
                });
            })
                // @ts-expect-error - db is unknown
                .then(db => ({ query: (0, util_1.promisify)(db.all).bind(db), close: (0, util_1.promisify)(db.close).bind(db) }));
        });
        this.opts = Object.assign({ table: 'keyv', keySize: 255 }, options);
        this.opts.table = toString(this.opts.table);
        const createTable = `CREATE TABLE IF NOT EXISTS ${this.opts.table}(key VARCHAR(${Number(this.opts.keySize)}) PRIMARY KEY, value TEXT )`;
        // @ts-expect-error - db is
        const connected = this.opts.connect()
            .then((db) => __awaiter(this, void 0, void 0, function* () { return db.query(createTable).then(() => db); }))
            .catch(error => this.emit('error', error));
        this.query = (sqlString, ...parameter) => __awaiter(this, void 0, void 0, function* () {
            return connected
                .then((db) => __awaiter(this, void 0, void 0, function* () { return db.query(sqlString, ...parameter); }));
        });
        this.close = () => __awaiter(this, void 0, void 0, function* () { return connected.then(db => db.close); });
    }
    get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const select = `SELECT * FROM ${this.opts.table} WHERE key = ?`;
            const rows = yield this.query(select, key);
            const row = rows[0];
            if (row === undefined) {
                return undefined;
            }
            return row.value;
        });
    }
    getMany(keys) {
        return __awaiter(this, void 0, void 0, function* () {
            const select = `SELECT * FROM ${this.opts.table} WHERE key IN (SELECT value FROM json_each(?))`;
            const rows = yield this.query(select, JSON.stringify(keys));
            const results = [...keys];
            let i = 0;
            for (const key of keys) {
                const rowIndex = rows.findIndex((row) => row.key === key);
                results[i] = rowIndex > -1 ? rows[rowIndex].value : undefined;
                i++;
            }
            return results;
        });
    }
    set(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const upsert = `INSERT INTO ${this.opts.table} (key, value)
			VALUES(?, ?) 
			ON CONFLICT(key) 
			DO UPDATE SET value=excluded.value;`;
            return this.query(upsert, key, value);
        });
    }
    delete(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const select = `SELECT * FROM ${this.opts.table} WHERE key = ?`;
            const del = `DELETE FROM ${this.opts.table} WHERE key = ?`;
            const rows = yield this.query(select, key);
            const row = rows[0];
            if (row === undefined) {
                return false;
            }
            yield this.query(del, key);
            return true;
        });
    }
    deleteMany(keys) {
        return __awaiter(this, void 0, void 0, function* () {
            const del = `DELETE FROM ${this.opts.table} WHERE key IN (SELECT value FROM json_each(?))`;
            const results = yield this.getMany(keys);
            if (results.every(x => x === undefined)) {
                return false;
            }
            yield this.query(del, JSON.stringify(keys));
            return true;
        });
    }
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            const del = `DELETE FROM ${this.opts.table} WHERE key LIKE ?`;
            yield this.query(del, this.namespace ? `${this.namespace}:%` : '%');
        });
    }
    iterator(namespace) {
        return __asyncGenerator(this, arguments, function* iterator_1() {
            const limit = Number.parseInt(this.opts.iterationLimit, 10) || 10;
            // @ts-expect-error - iterate
            function iterate(offset, options, query) {
                return __asyncGenerator(this, arguments, function* iterate_1() {
                    const select = `SELECT * FROM ${options.table} WHERE key LIKE ? LIMIT ? OFFSET ?`;
                    const iterator = yield __await(query(select, [`${namespace ? namespace + ':' : ''}%`, limit, offset]));
                    const entries = [...iterator];
                    if (entries.length === 0) {
                        return yield __await(void 0);
                    }
                    for (const entry of entries) {
                        offset += 1;
                        yield yield __await([entry.key, entry.value]);
                    }
                    yield __await(yield* __asyncDelegator(__asyncValues(iterate(offset, options, query))));
                });
            }
            yield __await(yield* __asyncDelegator(__asyncValues(iterate(0, this.opts, this.query))));
        });
    }
    has(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const exists = `SELECT EXISTS ( SELECT * FROM ${this.opts.table} WHERE key = ? )`;
            const result = yield this.query(exists, key);
            return Object.values(result[0])[0] === 1;
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.close();
        });
    }
}
module.exports = KeyvSqlite;
//# sourceMappingURL=index.js.map